pipeline {
    agent any

    environment {
        GITHUB_TOKEN = credentials('Github_Token')
        AZURE_PUBLISH_PROFILE = credentials('Azure_Publish_Profile') 
    }

    stages {
        stage('Clone Repository') {
            steps {
                git url: 'https://github.com/AbraarMohiuddin/BookWeb.git', credentialsId: 'Github_Token'
            }
        }

        stage('Restore') {
            steps {
                bat 'dotnet restore'
            }
        }

        stage('Build') {
            steps {
                bat 'dotnet build --configuration Debug'
            }
        }

        stage('Publish') {
            steps {
                bat 'dotnet publish --configuration Release --output publish_output'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    bat 'docker build -t bookstore-test -f BookStore/Dockerfile .'
                }
            }
        }

        stage('Cleanup Docker Containers') {
            steps {
                script {
                    bat '''
                    docker rmi bookstore-test || exit /b 0
                    '''
                }
            }
        }
        stage('Create Zip Package') {
    steps {
        script {
            bat 'powershell Compress-Archive -Path publish_output\\* -DestinationPath publish_output.zip'
        }
    }
}

stage('Deploy to Azure') {
    when {
        expression {
            currentBuild.result == null || currentBuild.result == 'SUCCESS'
        }
    }
    steps {
        script {
            withCredentials([file(credentialsId: 'Azure_Publish_Profile', variable: 'PUBLISH_PROFILE')]) {
                powershell '''
                $publishProfile = [xml](Get-Content $env:PUBLISH_PROFILE)
                $publishUrl = $publishProfile.publishData.publishProfile[0].publishUrl
                $userName = $publishProfile.publishData.publishProfile[0].userName
                $userPWD = $publishProfile.publishData.publishProfile[0].userPWD
                $zipFilePath = 'publish_output.zip'

                $password = ConvertTo-SecureString $userPWD -AsPlainText -Force
                $credential = New-Object System.Management.Automation.PSCredential($userName, $password)

                Invoke-WebRequest -Uri "https://$publishUrl/api/zipdeploy" -Method POST -InFile $zipFilePath -Headers @{"Content-Type"="application/zip"} -Credential $credential
                '''
            }
        }
    }
}

    }

    post {
        always {
            cleanWs()
        }
    }
}
